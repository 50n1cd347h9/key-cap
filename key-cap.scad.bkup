module KeyCap() {
	cap_width = 20;
	cap_height = cap_width;

	layers = 256;
	layer_thickness = cap_height / layers;
	wall_line_width = 1;
	min_angle = 20;
	max_angle = 90;
	min_r = 20;
	max_r = 40;

	function capPosZ(x) = 3 * -16^(x-2) + 1; // 0 <= x <= 2

	module Arc(radius) {
		angle = 2 * asin(cap_width / (2 * radius));

		translate([0, 0, 0])
			rotate([0, 90, 0])
			translate([-radius, 0, 0])
			rotate([0, 0, -angle/2])
			rotate_extrude(angle = angle, $fn=64)
			translate([radius, 0, 0])
			square([wall_line_width, layer_thickness]);
	}

	module SquareCap(radius) {
		for (i = [0 : layers/2]) {
			x = 2 / (layers / 2) * i; // [0, 2]
			translate([layer_thickness * i, 0, capPosZ(x)]) Arc(radius);
		}
		mirror([1, 0, 0])
			for (i = [0 : layers/2]) {
				x = 2 / (layers / 2) * i; // [0, 2]
				translate([layer_thickness * i, 0, capPosZ(x)]) Arc(radius);
			}
	}

	intersection() {
		SquareCap(20);
		translate([0, 0, -5]) linear_extrude(20) circle(d=cap_width, true);
	}
}

module KeyCap3() {
	cap_w = 20;
	cap_h = cap_w;
	granularity = 20;

	capPosZ = function (x, y) -16^(y/5 - 2) + 1/5 * (x/5)^2 + 1;

	// TODO: rewrite this func with let
	module Plot3D(x_range, y_range, z_func, granularity=20, thickness=2) {
		dx = (x_range[1] - x_range[0]) / granularity;
		dy = (y_range[1] - y_range[0]) / granularity;

		for(i = [y_range[0] : dy : y_range[1]])  {
			y0 = i;
			y1 = i + dy;
			for(j = [x_range[0]: dx : x_range[1]]) {
				x0 = j;
				x1 = j + dx;

				p0 = [x0, y0, z_func(x0, y0)];
				p1 = [x1, y0, z_func(x1, y0)];
				p2 = [x0, y1, z_func(x0, y1)];
				p3 = [x1, y1, z_func(x1, y1)];
				
				top = [];
				hull()
					polyhedron(points=[p0, p1, p2, p3],
							faces=[[0, 1, 3], [0, 2, 3]]);
			}
		}
	}

	Plot3D([-10, 10], [0, 11.5], capPosZ);
}

KeyCap3();
